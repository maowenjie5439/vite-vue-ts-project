{"version":3,"file":"vite.config.js","sourceRoot":"","sources":["vite.config.ts"],"names":[],"mappings":"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","sourcesContent":["import { defineConfig, loadEnv } from \"vite\";\r\nimport type { UserConfig, ConfigEnv } from \"vite\";\r\n// import { visualizer } from \"rollup-plugin-visualizer\";\r\nimport { fileURLToPath } from \"url\";\r\nimport vue from \"@vitejs/plugin-vue\";\r\nimport vueJsx from \"@vitejs/plugin-vue-jsx\";\r\nimport { viteMockServe } from \"vite-plugin-mock\";\r\nimport AutoImport from \"unplugin-auto-import/vite\";\r\nimport Components from \"unplugin-vue-components/vite\";\r\nimport { ElementPlusResolver } from \"unplugin-vue-components/resolvers\";\r\nimport IconsResolver from \"unplugin-icons/resolver\";\r\nimport ElementPlus from \"unplugin-element-plus/vite\";\r\nimport Icons from \"unplugin-icons/vite\";\r\nimport ViteCompression from \"vite-plugin-compression\";\r\nimport { preloadImgs } from \"./config/plugins/preloadImgs\";\r\n\r\nexport default defineConfig(\r\n    ({ mode }: ConfigEnv): UserConfig & { test: { include: string[] } } => {\r\n        debugger;\r\n        // 获取当前工作目录\r\n        const root = process.cwd();\r\n        // 获取环境变量\r\n        const env = loadEnv(mode, root);\r\n        console.log(\"🚀 ~ defineConfig ~ env:\", env);\r\n        return {\r\n            // 项目根目录\r\n            root,\r\n            // 项目部署的基础路径\r\n            base: \"./\",\r\n            publicDir: fileURLToPath(new URL(\"./public\", import.meta.url)), // 无需处理的静态资源位置\r\n            assetsInclude: fileURLToPath(\r\n                new URL(\"./src/assets\", import.meta.url)\r\n            ), // 需要处理的静态资源位置\r\n            plugins: [\r\n                ViteCompression({\r\n                    // verbose: true,\r\n                    // disable: false,\r\n                    threshold: 1024 * 20, // 压缩阈值\r\n                    algorithm: \"gzip\", // 压缩算法\r\n                    ext: \".gz\", // 压缩后缀\r\n                }),\r\n                // Vue模板文件编译插件\r\n                vue(),\r\n                // jsx文件编译插件\r\n                vueJsx(),\r\n                // mock插件\r\n                viteMockServe({\r\n                    // 拦截接口的目录\r\n                    mockPath: \"mock\",\r\n                    // 是否启用mock\r\n                    enable: env.VITE_APP_USE_MOCK === \"true\",\r\n                }),\r\n                // 开启ElementPlus自动引入CSS\r\n                ElementPlus({}),\r\n                // 按需引入插件，自动引入ElementPlus，处理 API 级别的自动导入\r\n                AutoImport({\r\n                    resolvers: [ElementPlusResolver(), IconsResolver()],\r\n                    // 生成类型声明文件\r\n                    dts: \"types/auto-imports.d.ts\",\r\n                    // 自动导入 Vue 相关函数，如：ref, reactive, toRef 等\r\n                    imports: [\"vue\", \"vue-router\"],\r\n                }),\r\n                // 按需引入插件，处理组件级别的自动导入\r\n                Components({\r\n                    resolvers: [ElementPlusResolver(), IconsResolver()],\r\n                    // 生成类型声明文件\r\n                    dts: \"types/components.d.ts\",\r\n                }),\r\n                Icons({\r\n                    autoInstall: true,\r\n                }),\r\n                preloadImgs({\r\n                    dir: 'src/assets/imgs/*.{jpg,png, svg}',\r\n                    attrs: {\r\n                        rel: 'preload',\r\n                    }\r\n                }),\r\n            ],\r\n            // 运行后本地预览的服务器\r\n            server: {\r\n                // 是否开启https\r\n                // https: false,\r\n                // 指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。\r\n                host: true,\r\n                // 开发环境预览服务器端口\r\n                port: 9000,\r\n                // 启动后是否自动打开浏览器\r\n                open: false,\r\n                // 是否开启CORS跨域\r\n                cors: true,\r\n                // 代理服务器\r\n                // 帮助我们开发时解决跨域问题\r\n                proxy: {\r\n                    // 这里的意思是 以/api开头发送的请求都会被转发到 http://xxx:9000\r\n                    [env.VITE_APP_API_BASEURL]: {\r\n                        target: \"http://localhost:9000\",\r\n                        // 改变 Host Header\r\n                        changeOrigin: true,\r\n                        // 发起请求时将 '/api' 替换为 ''\r\n                        //rewrite: (path) => path.replace(/^\\/api/, \"\"),\r\n                    },\r\n                    [env.VITE_APP_MOCK_BASEURL]: {\r\n                        target: \"http://localhost:9000\",\r\n                        // 改变 Host Header\r\n                        changeOrigin: true,\r\n                        // 发起请求时将 '/api' 替换为 ''\r\n                        //rewrite: (path) => path.replace(/^\\/api/, \"\"),\r\n                    },\r\n                },\r\n            },\r\n            // 打包配置\r\n            build: {\r\n                // 关闭 sorcemap 报错不会映射到源码\r\n                sourcemap: true,\r\n                // 打包大小超出 400kb 提示警告\r\n                chunkSizeWarningLimit: 400,\r\n                rollupOptions: {\r\n                    // 打包入口文件 根目录下的 index.html\r\n                    // 也就是项目从哪个文件开始打包\r\n                    input: {\r\n                        index: fileURLToPath(\r\n                            new URL(\"./index.html\", import.meta.url)\r\n                        ),\r\n                    },\r\n                    // plugins: [visualizer({ open: true })],\r\n                    // output: {\r\n                    //     format: \"esm\",\r\n                    //     // 1. 代码分割的chunk文件命名\r\n                    //     chunkFileNames: \"static/js/[name]-[hash].js\",\r\n                    //     // 2. 入口文件的chunk文件命名\r\n                    //     entryFileNames: \"static/js/[name]-[hash].js\",\r\n                    //     // 3. 静态资源文件的命名\r\n                    //     assetFileNames: \"static/[ext]/[name]-[hash].[ext]\",\r\n                    //     // [name]: 文件名\r\n                    //     // [hash]: 内容哈希值，用于缓存控制\r\n                    //     // [ext]: 文件扩展名\r\n                    // },\r\n                    // output: {\r\n                    //     manualChunks: (id: string) => {\r\n                    //         if (id.includes('node_modules')) {\r\n                    //             return 'vendor';\r\n                    //         }else{\r\n                    //             return 'index'\r\n                    //         }\r\n                    //     },\r\n                    // }\r\n\r\n                    output: {\r\n                        // 最小chunk文件大小24kb\r\n                        experimentalMinChunkSize: 20 * 1024,\r\n                        manualChunks: (id: string) => {\r\n                            if (id.includes(\"node_modules\")) {\r\n                                return \"vendor\";\r\n                            }\r\n                        },\r\n                        // 1. 代码分割的chunk文件命名\r\n                        chunkFileNames: \"static/js/chunk-[hash].js\",\r\n                        // 2. 入口文件的chunk文件命名\r\n                        entryFileNames: \"static/js/entry-[hash].js\",\r\n                        // 3. 静态资源文件的命名\r\n                        assetFileNames: \"static/[ext]/[name]-[hash].[ext]\",\r\n                    },\r\n                },\r\n            },\r\n            // 配置别名\r\n            resolve: {\r\n                alias: {\r\n                    \"@\": fileURLToPath(new URL(\"./src\", import.meta.url)),\r\n                    \"#\": fileURLToPath(new URL(\"./types\", import.meta.url)),\r\n                },\r\n            },\r\n            css: {\r\n                preprocessorOptions: {\r\n                    scss: {\r\n                        // additionalData: `@import \"@/styles/index.scss\";`,\r\n                    },\r\n                },\r\n            },\r\n            test: {\r\n                include: [\"test/**/*.test.ts\"],\r\n            },\r\n        };\r\n    }\r\n);\r\n"]}